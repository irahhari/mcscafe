package MCsCafe;


import java.awt.HeadlessException;
import java.awt.event.ItemEvent;
import java.io.File;
import java.io.IOException;
import java.net.URI;
import java.net.URISyntaxException;
import java.nio.file.Files;
import java.nio.file.Paths;
import java.nio.file.StandardOpenOption;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.sql.Timestamp;
import java.util.ArrayList;
import javax.swing.JOptionPane;
import javax.swing.RowFilter;
import javax.swing.event.DocumentListener;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableModel;
import javax.swing.table.TableRowSorter;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
/**
 *
 * @author harig
 */
public class Bills1 extends javax.swing.JFrame {

    private TableRowSorter<TableModel> rowSorter;

    /**
     * Creates new form Bills
     */
    @SuppressWarnings("unchecked")
    public Bills1() {
        File file = new File(System.getProperty("user.dir") + "\\lib\\log.txt");
        if (!file.exists()) {
            try {
                file.createNewFile();
            } catch (IOException ex) {
            }
        }

        this.numbers = new ArrayList<>();
        initComponents();

        DefaultTableModel model = (DefaultTableModel) jTable1.getModel();
        Connection con = null;
        Statement stmt = null;
        ResultSet rs = null;
        try {
            Class.forName("java.sql.Driver");
            con = DriverManager.getConnection("jdbc:mysql://localhost/mcscafe", "mcscafe", "hari");
            stmt = con.createStatement();
            String query = "SELECT * FROM Food;";
            rs = stmt.executeQuery(query);
            while (rs.next()) {
                String qwe = rs.getString(1);
                String type = qwe.substring(0, qwe.length() - 2);
                model.addRow(new Object[]{qwe, rs.getString(2), rs.getInt(3), foodtype(type)});
            }
        } catch (ClassNotFoundException | SQLException e) {
            System.out.println(e);
            try {
                Files.write(Paths.get(System.getProperty("user.dir") + "\\lib\\log.txt"), LoginPage.encrypt(new java.util.Date(System.currentTimeMillis()).toString()
                        + " Menu:73:Menu\n" + e.toString() + "\n\n").getBytes(), StandardOpenOption.APPEND);
            } catch (IOException ex) {
            }
        } finally {
            if (con != null) {
                try {
                    con.close();
                } catch (SQLException ex) {
                }
            }
            if (stmt != null) {
                try {
                    stmt.close();
                } catch (SQLException ex) {
                }
            }
            if (rs != null) {
                try {
                    rs.close();
                } catch (SQLException ex) {
                }
            }
        }
        rowSorter = new TableRowSorter<>(jTable1.getModel());
        jTable1.setRowSorter(rowSorter);
        Keyword.getDocument().addDocumentListener(new DocumentListener() {

            @Override
            public void insertUpdate(javax.swing.event.DocumentEvent e) {
                String text = Keyword.getText();

                if (text.trim().length() == 0) {
                    rowSorter.setRowFilter(null);
                } else {
                    rowSorter.setRowFilter(RowFilter.regexFilter("(?i)" + text));
                }
            }

            @Override
            public void removeUpdate(javax.swing.event.DocumentEvent e) {
                insertUpdate(e);
            }

            @Override
            public void changedUpdate(javax.swing.event.DocumentEvent e) {
                throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
            }
        });
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        AddressTF = new javax.swing.JTextField();
        NameCB = new javax.swing.JComboBox<>();
        MobileTF = new javax.swing.JTextField();
        jButton1 = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        Bill = new javax.swing.JTable();
        jLabel5 = new javax.swing.JLabel();
        TotalTF = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        UPIRB = new javax.swing.JRadioButton();
        CardRB = new javax.swing.JRadioButton();
        PostpaidRB = new javax.swing.JRadioButton();
        CashRB = new javax.swing.JRadioButton();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        AmountTF = new javax.swing.JTextField();
        ReturnTF = new javax.swing.JTextField();
        BillBtn = new javax.swing.JButton();
        CancelBtn = new javax.swing.JButton();
        MenuBtn = new javax.swing.JButton();
        WACB = new javax.swing.JCheckBox();
        ParcelCB = new javax.swing.JCheckBox();
        TACB = new javax.swing.JCheckBox();
        jLabel15 = new javax.swing.JLabel();
        Keyword = new javax.swing.JTextField();
        Foodname = new javax.swing.JTextField();
        Rate = new javax.swing.JTextField();
        Quantity = new javax.swing.JTextField();
        jButton2 = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();

        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        setTitle("Bill | MC's CafÃ©");
        setMinimumSize(new java.awt.Dimension(580, 580));

        jLabel1.setText("Bill");

        jLabel2.setText("Address");

        jLabel3.setText("Name");

        jLabel4.setText("Mobile");

        AddressTF.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                AddressTFKeyTyped(evt);
            }
        });

        NameCB.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                NameCBItemStateChanged(evt);
            }
        });

        MobileTF.setEditable(false);
        MobileTF.setDisabledTextColor(new java.awt.Color(0, 0, 0));
        MobileTF.setEnabled(false);

        jButton1.setMnemonic('S');
        jButton1.setText("Search");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        Bill.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Item Name", "Rate", "Quantity", "Amount"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Object.class, java.lang.Integer.class, java.lang.Integer.class, java.lang.Integer.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        Bill.setColumnSelectionAllowed(true);
        Bill.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                BillMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(Bill);
        Bill.getColumnModel().getSelectionModel().setSelectionMode(javax.swing.ListSelectionModel.SINGLE_INTERVAL_SELECTION);
        if (Bill.getColumnModel().getColumnCount() > 0) {
            Bill.getColumnModel().getColumn(0).setResizable(false);
            Bill.getColumnModel().getColumn(1).setResizable(false);
            Bill.getColumnModel().getColumn(2).setResizable(false);
            Bill.getColumnModel().getColumn(3).setResizable(false);
        }

        jLabel5.setText("Total");

        TotalTF.setEditable(false);
        TotalTF.setText("0");
        TotalTF.setDisabledTextColor(java.awt.Color.black);

        jLabel6.setText("Payment");

        buttonGroup1.add(UPIRB);
        UPIRB.setText("UPI");
        UPIRB.setEnabled(false);

        buttonGroup1.add(CardRB);
        CardRB.setText("Card");
        CardRB.setEnabled(false);

        buttonGroup1.add(PostpaidRB);
        PostpaidRB.setText("Postpaid");
        PostpaidRB.setEnabled(false);

        buttonGroup1.add(CashRB);
        CashRB.setText("Cash");
        CashRB.setEnabled(false);
        CashRB.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                CashRBItemStateChanged(evt);
            }
        });

        jLabel7.setText("Customer gave");

        jLabel8.setText("Return");

        AmountTF.setDisabledTextColor(java.awt.Color.black);
        AmountTF.setEnabled(false);
        AmountTF.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                AmountTFKeyReleased(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                AmountTFKeyTyped(evt);
            }
        });

        ReturnTF.setDisabledTextColor(java.awt.Color.black);
        ReturnTF.setEnabled(false);

        BillBtn.setMnemonic('B');
        BillBtn.setText("Bill");
        BillBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BillBtnActionPerformed(evt);
            }
        });

        CancelBtn.setMnemonic('C');
        CancelBtn.setText("Cancel");
        CancelBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CancelBtnActionPerformed(evt);
            }
        });

        MenuBtn.setMnemonic('M');
        MenuBtn.setText("Back to Menu");
        MenuBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                MenuBtnActionPerformed(evt);
            }
        });

        WACB.setSelected(true);
        WACB.setText("Send WhatsApp Message");

        ParcelCB.setSelected(true);
        ParcelCB.setText("Parcel");
        ParcelCB.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                ParcelCBItemStateChanged(evt);
            }
        });

        TACB.setText("Take Away");

        jLabel15.setText("Enter the keyword you want to search");

        Foodname.setDisabledTextColor(new java.awt.Color(0, 0, 0));
        Foodname.setEnabled(false);

        Rate.setDisabledTextColor(new java.awt.Color(0, 0, 0));
        Rate.setEnabled(false);

        Quantity.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                QuantityKeyTyped(evt);
            }
        });

        jButton2.setText("Add");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Item Code", "Item Name", "Price", "Category"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.Integer.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jTable1.setColumnSelectionAllowed(true);
        jTable1.getTableHeader().setReorderingAllowed(false);
        jTable1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTable1MouseClicked(evt);
            }
        });
        jScrollPane2.setViewportView(jTable1);
        jTable1.getColumnModel().getSelectionModel().setSelectionMode(javax.swing.ListSelectionModel.SINGLE_INTERVAL_SELECTION);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(183, 183, 183)
                .addComponent(WACB)
                .addGap(0, 0, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(CancelBtn)
                .addGap(73, 73, 73)
                .addComponent(BillBtn)
                .addGap(58, 58, 58)
                .addComponent(MenuBtn)
                .addGap(75, 75, 75))
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(11, 11, 11)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(TACB)
                                .addGap(18, 18, 18)
                                .addComponent(ParcelCB)
                                .addGap(18, 18, 18))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel6)
                                .addGap(18, 18, 18)
                                .addComponent(UPIRB)
                                .addGap(18, 18, 18)
                                .addComponent(CardRB)
                                .addGap(18, 18, 18)
                                .addComponent(PostpaidRB)
                                .addGap(18, 18, 18)
                                .addComponent(CashRB)))
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel5, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addComponent(jLabel8, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(ReturnTF, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(jLabel7)))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(TotalTF)
                            .addComponent(AmountTF, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addComponent(jScrollPane1))
                .addContainerGap())
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane2)
                .addContainerGap())
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(Foodname, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(Rate, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(Quantity, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(245, 245, 245)
                        .addComponent(jLabel1))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(28, 28, 28)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel2)
                            .addComponent(jLabel3))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel15)
                                .addGap(18, 18, 18)
                                .addComponent(Keyword, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(AddressTF)
                                    .addComponent(NameCB, javax.swing.GroupLayout.PREFERRED_SIZE, 125, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(142, 142, 142)
                                        .addComponent(jButton1))
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(65, 65, 65)
                                        .addComponent(jLabel4)
                                        .addGap(18, 18, 18)
                                        .addComponent(MobileTF, javax.swing.GroupLayout.PREFERRED_SIZE, 125, javax.swing.GroupLayout.PREFERRED_SIZE)))))))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(AddressTF, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton1))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(jLabel4)
                    .addComponent(NameCB, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(MobileTF, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel15)
                    .addComponent(Keyword, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 108, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(Foodname, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(Rate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(Quantity, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton2))
                .addGap(20, 20, 20)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 142, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(TotalTF, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(ParcelCB)
                    .addComponent(TACB))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel6)
                    .addComponent(UPIRB)
                    .addComponent(CardRB)
                    .addComponent(PostpaidRB)
                    .addComponent(CashRB))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel7)
                    .addComponent(AmountTF, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel8)
                    .addComponent(ReturnTF, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(WACB)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(BillBtn)
                    .addComponent(CancelBtn)
                    .addComponent(MenuBtn))
                .addGap(18, 18, 18))
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void AmountTFKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_AmountTFKeyTyped
        // TODO add your handling code here:
        if (!Character.isDigit(evt.getKeyChar()))
            evt.consume();
    }//GEN-LAST:event_AmountTFKeyTyped

    private void CashRBItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_CashRBItemStateChanged
        // TODO add your handling code here:
        if (evt.getStateChange() == ItemEvent.SELECTED) {
            AmountTF.setEnabled(true);
        } else {
            AmountTF.setEnabled(false);
            AmountTF.setText("");
            ReturnTF.setText("");
        }
    }//GEN-LAST:event_CashRBItemStateChanged

    private void AddressTFKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_AddressTFKeyTyped
        // TODO add your handling code here:
        if (AddressTF.getText().length() >= 5 || !Character.isLetterOrDigit(evt.getKeyChar())) {
            evt.consume();
        }
    }//GEN-LAST:event_AddressTFKeyTyped

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        NameCB.removeAllItems();
        numbers.removeAll(numbers);

        if ("".equals(AddressTF.getText())) {
            JOptionPane.showMessageDialog(this, "Enter the address", "Warning", JOptionPane.WARNING_MESSAGE);
            return;
        }
        Connection con = null;
        Statement stmt = null;
        ResultSet rs = null;
        try {
            Class.forName("java.sql.Driver");
            con = DriverManager.getConnection("jdbc:mysql://localhost/mcscafe", "mcscafe", "hari");
            stmt = con.createStatement();
            String query = "SELECT Name, Mobile FROM user WHERE Address LIKE '" + AddressTF.getText() + "%';";
            rs = stmt.executeQuery(query);
            if (rs.next() == false) {
                JOptionPane.showMessageDialog(this, "User not Registered", "Warning", JOptionPane.WARNING_MESSAGE);
                new UserRegistration().setVisible(true);
                this.setVisible(false);
            } else {
                do {
                    numbers.add(rs.getLong(2));
                    NameCB.addItem(rs.getString(1));
                } while (rs.next());
            }
        } catch (HeadlessException | ClassNotFoundException | SQLException e) {
            try {
                Files.write(Paths.get(System.getProperty("user.dir") + "\\lib\\log.txt"), LoginPage.encrypt(new java.util.Date(System.currentTimeMillis()).toString()
                        + " Bills:521:jButton1ActionPerformed\n" + e.toString() + "\n\n").getBytes(), StandardOpenOption.APPEND);
            } catch (IOException ex) {
            }
        } finally {
            if (rs != null) {
                try {
                    rs.close();
                } catch (SQLException e) {
                }
            }
            if (stmt != null) {
                try {
                    stmt.close();
                } catch (SQLException e) {
                }
            }
            if (con != null) {
                try {
                    con.close();
                } catch (SQLException e) {
                }
            }
        }
    }//GEN-LAST:event_jButton1ActionPerformed

    private void NameCBItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_NameCBItemStateChanged
        // TODO add your handling code here:
        if (evt.getStateChange() == ItemEvent.SELECTED && NameCB.getSelectedIndex() != -1)
            MobileTF.setText("" + numbers.get(NameCB.getSelectedIndex()));
    }//GEN-LAST:event_NameCBItemStateChanged

    private void AmountTFKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_AmountTFKeyReleased
        // TODO add your handling code here:
        if (!"".equals(AmountTF.getText()) && !"".equals(TotalTF.getText())) {
            int total = Integer.parseInt(TotalTF.getText());
            int amount = Integer.parseInt(AmountTF.getText());
            if (amount >= total) {
                ReturnTF.setText("" + (amount - total));    //CALCULATES AMOUNT TO BE RETURNED BY CUSTOMER
            } else {
                ReturnTF.setText("");
            }
        }
    }//GEN-LAST:event_AmountTFKeyReleased

    private void BillBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BillBtnActionPerformed
        // TODO add your handling code here:
        if (Bill.getValueAt(Bill.getRowCount() - 1, 0) == null) {
            ((DefaultTableModel) Bill.getModel()).setRowCount(Bill.getRowCount() - 1);
        }

        long mobile;
        int price, outstanding = 0;

        try {
            mobile = Long.parseLong(MobileTF.getText());
        } catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(this, "Enter address and choose a name", "Warning", JOptionPane.WARNING_MESSAGE);
            return;
        }

        try {
            price = Integer.parseInt(TotalTF.getText());
        } catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(this, "Enter items", "Warning", JOptionPane.WARNING_MESSAGE);
            return;
        }

        if (("".equals(ReturnTF.getText()) && CashRB.isSelected())) {
            JOptionPane.showMessageDialog(this, "Enter Receiving Amount!", "Warning", JOptionPane.WARNING_MESSAGE);
            return;
        }

        String timestamp = new Timestamp(System.currentTimeMillis()).toString();
        String method = null, methods = null, time = timestamp.substring(0, timestamp.indexOf('.'));
        if (ParcelCB.isSelected()) {
            methods = "Pay%20after%20delivery";
        } else if (UPIRB.isSelected()) {
            method = "U";
            methods = "UPI";
        } else if (CardRB.isSelected()) {
            method = "B";
            methods = "Card";
        } else if (CashRB.isSelected()) {
            method = "C";
            methods = "Cash";
        } else if (PostpaidRB.isSelected()) {
            method = "P";
            methods = "Postpaid";
        } else {
            JOptionPane.showMessageDialog(this, "Choose a Payment Method!", "Warning", JOptionPane.WARNING_MESSAGE);
            return;
        }

        Connection con = null;
        Statement stmt = null;
        ResultSet rs = null;
        try {
            Class.forName("java.sql.Driver");
            con = DriverManager.getConnection("jdbc:mysql://localhost/mcscafe", "mcscafe", "hari");
            stmt = con.createStatement();
            String query;
            if (ParcelCB.isSelected()) {
                price += 10;
                query = "INSERT INTO bill VALUES('" + time + "'," + mobile + "," + price + ",null,'P');";
            } else {
                query = "INSERT INTO bill VALUES('" + time + "'," + mobile + "," + price + ",'" + method + "','D');";
            }
            stmt.executeUpdate(query);
            JOptionPane.showMessageDialog(this, "Bill Processed!");
        } catch (ClassNotFoundException | SQLException e) {
            try {
                Files.write(Paths.get(System.getProperty("user.dir") + "\\lib\\log.txt"), LoginPage.encrypt(new java.util.Date(System.currentTimeMillis()).toString()
                        + " Bills:632:BillBtnActionPerformed For Inserting into Bill\n" + e.toString() + "\n\n").getBytes(), StandardOpenOption.APPEND);
            } catch (IOException ex) {
            }
        } finally {
            if (stmt != null) {
                try {
                    stmt.close();
                } catch (SQLException e) {
                }
            }
            if (con != null) {
                try {
                    con.close();
                } catch (SQLException e) {
                }
            }
        }

        if (ParcelCB.isSelected()) {
            String item = "";
            for (int i = 0; i < Bill.getRowCount(); i++) {
                item += (Bill.getValueAt(i, 2) + " " + Bill.getValueAt(i, 0) + "\n");
            }
            try {
                Class.forName("java.sql.Driver");
                con = DriverManager.getConnection("jdbc:mysql://localhost/mcscafe", "mcscafe", "hari");
                stmt = con.createStatement();
                String query;
                if (TACB.isSelected()) {
                    query = "INSERT INTO queue VALUES('" + time + "'," + mobile + ",'" + item + "'," + price + ",'F','M');";
                } else {
                    query = "INSERT INTO queue VALUES('" + time + "'," + mobile + ",'" + item + "'," + price + ",'F','F');";
                }
                stmt.executeUpdate(query);
            } catch (ClassNotFoundException | SQLException e) {
                try {
                    Files.write(Paths.get(System.getProperty("user.dir") + "\\lib\\log.txt"), LoginPage.encrypt(new java.util.Date(System.currentTimeMillis()).toString()
                            + " Bills:664:BillBtnActionPerformed For Inserting into Queue\n" + e.toString() + "\n\n").getBytes(), StandardOpenOption.APPEND);
                } catch (IOException ex) {
                }
            } finally {
                if (stmt != null) {
                    try {
                        stmt.close();
                    } catch (SQLException e) {
                    }
                }
                if (con != null) {
                    try {
                        con.close();
                    } catch (SQLException e) {
                    }
                }
            }
        } else if (PostpaidRB.isSelected()) {
            try {
                Class.forName("java.sql.Driver");
                con = DriverManager.getConnection("jdbc:mysql://localhost/mcscafe", "mcscafe", "hari");
                stmt = con.createStatement();
                String query = "SELECT outstanding FROM postpaid where mobile=" + mobile + ";";
                rs = stmt.executeQuery(query);
                rs.next();
                outstanding = rs.getInt(1);
                query = "INSERT INTO postpaid VALUES (" + mobile + "," + price + ") ON DUPLICATE KEY UPDATE outstanding = outstanding +" + price + ";";
                stmt.executeUpdate(query);
                JOptionPane.showMessageDialog(this, "Postpaid Updated! Outstanding Balance: " + (outstanding + price));
            } catch (ClassNotFoundException | SQLException e) {
                try {
                    Files.write(Paths.get(System.getProperty("user.dir") + "\\lib\\log.txt"), LoginPage.encrypt(new java.util.Date(System.currentTimeMillis()).toString()
                            + " Bills:697:BillBtnActionPerformed For Getting/Inserting from/into Postpaid\n" + e.toString() + "\n\n").getBytes(), StandardOpenOption.APPEND);
                } catch (IOException ex) {
                }
            } finally {
                if (rs != null) {
                    try {
                        rs.close();
                    } catch (SQLException e) {
                    }
                }
                if (stmt != null) {
                    try {
                        stmt.close();
                    } catch (SQLException e) {
                    }
                }
                if (con != null) {
                    try {
                        con.close();
                    } catch (SQLException e) {
                    }
                }
            }
        }

        String items = "Hello%20from%20MC's%20CafÃ©!%0D%0A%0D%0ANet%20Amount%20Payable%3A%20%E2%82%B9" + price + "%0D%0APayment%20Method%3A%20" + methods + "%0D%0A%0D%0A";
        for (int i = 0; i < Bill.getRowCount(); i++) {
            items += (Bill.getValueAt(i, 2) + "%20" + Bill.getValueAt(i, 0) + "%20(%E2%82%B9" + Bill.getValueAt(i, 1) + ")%20-%20%E2%82%B9" + Bill.getValueAt(i, 3) + "%0D%0A");
        }

        CancelBtn.doClick();

        if (ParcelCB.isSelected()) {
            items += "%0D%0AParcel%20Charges%20-%20%E2%82%B910%0D%0A";
        } else if (PostpaidRB.isSelected()) {
            items += "%0D%0AOutstanding%20Balance%3A%20%20%E2%82%B9" + (outstanding + price) + "%0D%0A";
        }

        if (WACB.isSelected()) {
            try {
                URI url = new URI(("https://wa.me/91" + mobile + "?text=" + items + "%0D%0AThank%20you%20for%20dining%20with%20us%2C%0D%0AHope%20to%20see%20you%20again!").replaceAll(" ", "%20"));
                java.awt.Desktop.getDesktop().browse(url);
            } catch (IOException | URISyntaxException e) {
                try {
                    Files.write(Paths.get(System.getProperty("user.dir") + "\\lib\\log.txt"), LoginPage.encrypt(new java.util.Date(System.currentTimeMillis()).toString()
                            + " Bills:788:BillBtnActionPerformed For Opening WA\n" + e.toString() + "\n\n").getBytes(), StandardOpenOption.APPEND);
                } catch (IOException ex) {
                }
            }
        }
    }//GEN-LAST:event_BillBtnActionPerformed

    private void CancelBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CancelBtnActionPerformed
        // TODO add your handling code here:
        new Bills1().setVisible(true);
        this.dispose();
    }//GEN-LAST:event_CancelBtnActionPerformed

    private void MenuBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_MenuBtnActionPerformed
        // TODO add your handling code here:
        new MCsCafe.MenuPage().setVisible(true);
        this.dispose();
    }//GEN-LAST:event_MenuBtnActionPerformed

    private void ParcelCBItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_ParcelCBItemStateChanged
        // TODO add your handling code here:
        if (evt.getStateChange() == ItemEvent.SELECTED) {
            buttonGroup1.clearSelection();
            UPIRB.setEnabled(false);
            CardRB.setEnabled(false);
            PostpaidRB.setEnabled(false);
            CashRB.setEnabled(false);
            TACB.setEnabled(true);
        } else {
            UPIRB.setEnabled(true);
            CardRB.setEnabled(true);
            PostpaidRB.setEnabled(true);
            CashRB.setEnabled(true);
            TACB.setEnabled(false);
        }
        TACB.setSelected(false);
    }//GEN-LAST:event_ParcelCBItemStateChanged

    private void QuantityKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_QuantityKeyTyped
        // TODO add your handling code here:
        if (!Character.isDigit(evt.getKeyChar()))
            evt.consume();
    }//GEN-LAST:event_QuantityKeyTyped

    private void jTable1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTable1MouseClicked
        // TODO add your handling code here:
        DefaultTableModel model = (DefaultTableModel) jTable1.getModel();
        int row = jTable1.convertRowIndexToModel(jTable1.getSelectedRow());
        Foodname.setText(model.getValueAt(row, 1).toString());
        Rate.setText(model.getValueAt(row, 2).toString());
        jTable1.clearSelection();
        Bill.clearSelection();
        Keyword.setText("");
    }//GEN-LAST:event_jTable1MouseClicked

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // TODO add your handling code here:
        String r = Rate.getText(), n = Foodname.getText(), q = Quantity.getText();
        if (r.equals("") || n.equals("")) {
            JOptionPane.showMessageDialog(this, "Choose an item and enter quantity", "Warning", JOptionPane.WARNING_MESSAGE);
            return;
        }
        if (q.equals("") || 0 == Integer.parseInt(q)) {
            jTable1.clearSelection();
            Bill.clearSelection();
            Foodname.setText("");
            Rate.setText("");
            Quantity.setText("");
            return;
        }
        DefaultTableModel model = (DefaultTableModel) Bill.getModel();
        int amount = Integer.parseInt(r) * Integer.parseInt(q);
        model.addRow(new Object[]{n, r, q, amount});
        int total = 0;
        for (int i = 0; i < Bill.getRowCount(); i++) {
            if (jTable1.getValueAt(i, 3) != null) {
                total += (int) Bill.getValueAt(i, 3);
            }
        }
        TotalTF.setText("" + total);
        jTable1.clearSelection();
        Bill.clearSelection();
        Foodname.setText("");
        Rate.setText("");
        Quantity.setText("");
    }//GEN-LAST:event_jButton2ActionPerformed

    private void BillMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_BillMouseClicked
        // TODO add your handling code here:
        DefaultTableModel model = (DefaultTableModel) Bill.getModel();
        int row = Bill.convertRowIndexToModel(Bill.getSelectedRow());
        Foodname.setText(model.getValueAt(row, 0).toString());
        Rate.setText(model.getValueAt(row, 1).toString());
        Quantity.setText(model.getValueAt(row, 2).toString());
        model.removeRow(row);
        int total = 0;
        for (int i = 0; i < Bill.getRowCount(); i++) {
            if (jTable1.getValueAt(i, 3) != null) {
                total += (int) Bill.getValueAt(i, 3);
            }
        }
        TotalTF.setText(total + "");
        jTable1.clearSelection();
        Bill.clearSelection();
    }//GEN-LAST:event_BillMouseClicked

    private ArrayList<Long> numbers;

    private String foodtype(String type) {
        switch (type) {
            case "B":
                return "Burger";
            case "FJ":
                return "Fruit Juice";
            case "HD":
                return "Hot Drinks";
            case "P":
                return "Pasta";
            case "W":
                return "Wraps";
            case "QB":
                return "Quick Bites";
            case "S":
                return "Salad";
            case "D":
                return "Desserts";
            case "M":
                return "Mojito";
            case "CM":
                return "Combo Meal";
            case "SW":
                return "Sandwich";
            case "MS":
                return "Milk Shake";
            case "C":
                return "Chats";
            default:
                return "Miscellaneous";
        }
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | javax.swing.UnsupportedLookAndFeelException ex) {
            try {
                Files.write(Paths.get(System.getProperty("user.dir") + "\\lib\\log.txt"), LoginPage.encrypt(new java.util.Date(System.currentTimeMillis()).toString()
                        + " Bills:844:main\n" + ex.toString() + "\n\n").getBytes(), StandardOpenOption.APPEND);
            } catch (IOException e) {
            }
        }
        //</editor-fold>

        //</editor-fold>
        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            @Override
            public void run() {
                new Bills1().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField AddressTF;
    private javax.swing.JTextField AmountTF;
    private javax.swing.JTable Bill;
    private javax.swing.JButton BillBtn;
    private javax.swing.JButton CancelBtn;
    private javax.swing.JRadioButton CardRB;
    private javax.swing.JRadioButton CashRB;
    private javax.swing.JTextField Foodname;
    private javax.swing.JTextField Keyword;
    private javax.swing.JButton MenuBtn;
    private javax.swing.JTextField MobileTF;
    private javax.swing.JComboBox<String> NameCB;
    private javax.swing.JCheckBox ParcelCB;
    private javax.swing.JRadioButton PostpaidRB;
    private javax.swing.JTextField Quantity;
    private javax.swing.JTextField Rate;
    private javax.swing.JTextField ReturnTF;
    private javax.swing.JCheckBox TACB;
    private javax.swing.JTextField TotalTF;
    private javax.swing.JRadioButton UPIRB;
    private javax.swing.JCheckBox WACB;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTable jTable1;
    // End of variables declaration//GEN-END:variables
}
