package MCsCafe;

import java.awt.event.ItemEvent;
import java.io.File;
import java.io.IOException;
import java.net.URI;
import java.net.URISyntaxException;
import java.nio.file.Files;
import java.nio.file.Paths;
import java.nio.file.StandardOpenOption;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import javax.swing.DefaultListSelectionModel;
import javax.swing.JOptionPane;
import javax.swing.ListSelectionModel;
import javax.swing.RowSorter;
import javax.swing.SortOrder;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableModel;
import javax.swing.table.TableRowSorter;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
/**
 *
 * @author harig
 */
class ForcedListSelectionModel extends DefaultListSelectionModel {

    public ForcedListSelectionModel() {
        setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
    }

    @Override
    public void clearSelection() {
    }

    @Override
    public void removeSelectionInterval(int index0, int index1) {
    }

}

public class Queues extends javax.swing.JFrame {

    /**
     * Creates new form Queues
     */
    public Queues() {
        File file = new File(System.getProperty("user.dir") + "\\lib\\log.txt");
        if (!file.exists()) {
            try {
                file.createNewFile();
            } catch (IOException ex) {
            }
        }
        initComponents();
        RefreshBtn.doClick();

        TableRowSorter<TableModel> sorter = new TableRowSorter<>(jTable1.getModel());
        jTable1.setRowSorter(sorter);
        List<RowSorter.SortKey> sortKeys = new ArrayList<>();
        sortKeys.add(new RowSorter.SortKey(5, SortOrder.DESCENDING));
        sortKeys.add(new RowSorter.SortKey(0, SortOrder.ASCENDING));
        sortKeys.add(new RowSorter.SortKey(6, SortOrder.ASCENDING));
        sorter.setSortKeys(sortKeys);
        sorter.sort();
        jTable1.getTableHeader().setEnabled(false);
        jTable1.setSelectionModel(new ForcedListSelectionModel());
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        jLabel1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        TimeTF = new javax.swing.JTextField();
        jTextField2 = new javax.swing.JTextField();
        MobileTF = new javax.swing.JTextField();
        TotalTF = new javax.swing.JTextField();
        DeliveredTF = new javax.swing.JTextField();
        PaidTF = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();
        RefreshBtn = new javax.swing.JButton();
        PayBtn = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        ReturnTF = new javax.swing.JTextField();
        AmountTF = new javax.swing.JTextField();
        WACB = new javax.swing.JCheckBox();
        jLabel9 = new javax.swing.JLabel();
        UPIRB = new javax.swing.JRadioButton();
        CardRB = new javax.swing.JRadioButton();
        PostpaidRB = new javax.swing.JRadioButton();
        CashRB = new javax.swing.JRadioButton();
        jLabel10 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        jButton4 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        setTitle("Queue | MC's CafÃ©");

        jLabel1.setText("Queue");

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Bill Number", "Address", "Mobile Number", "Items", "Price", "Delivered", "Paid"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.Long.class, java.lang.Object.class, java.lang.Integer.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jTable1.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        jTable1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTable1MouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(jTable1);
        jTable1.getColumnModel().getSelectionModel().setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        if (jTable1.getColumnModel().getColumnCount() > 0) {
            jTable1.getColumnModel().getColumn(0).setPreferredWidth(100);
            jTable1.getColumnModel().getColumn(1).setPreferredWidth(30);
            jTable1.getColumnModel().getColumn(2).setPreferredWidth(90);
            jTable1.getColumnModel().getColumn(3).setPreferredWidth(200);
            jTable1.getColumnModel().getColumn(4).setPreferredWidth(40);
            jTable1.getColumnModel().getColumn(5).setPreferredWidth(50);
            jTable1.getColumnModel().getColumn(6).setPreferredWidth(40);
        }

        TimeTF.setEditable(false);
        TimeTF.setDisabledTextColor(new java.awt.Color(0, 0, 0));
        TimeTF.setEnabled(false);

        jTextField2.setEditable(false);
        jTextField2.setDisabledTextColor(new java.awt.Color(0, 0, 0));
        jTextField2.setEnabled(false);

        MobileTF.setEditable(false);
        MobileTF.setDisabledTextColor(new java.awt.Color(0, 0, 0));
        MobileTF.setEnabled(false);

        TotalTF.setEditable(false);
        TotalTF.setDisabledTextColor(new java.awt.Color(0, 0, 0));
        TotalTF.setEnabled(false);

        DeliveredTF.setEditable(false);
        DeliveredTF.setDisabledTextColor(new java.awt.Color(0, 0, 0));
        DeliveredTF.setEnabled(false);

        PaidTF.setEditable(false);
        PaidTF.setDisabledTextColor(new java.awt.Color(0, 0, 0));
        PaidTF.setEnabled(false);

        jLabel2.setText("Bill Number");

        jLabel3.setText("Address");

        jLabel4.setText("Mobile");

        jLabel6.setText("Delivered");

        jLabel7.setText("Paid");

        jLabel5.setText("Price");

        jLabel8.setText("Items");

        jTextArea1.setEditable(false);
        jTextArea1.setColumns(20);
        jTextArea1.setRows(5);
        jScrollPane2.setViewportView(jTextArea1);

        RefreshBtn.setMnemonic('R');
        RefreshBtn.setText("Refresh");
        RefreshBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                RefreshBtnActionPerformed(evt);
            }
        });

        PayBtn.setMnemonic('P');
        PayBtn.setText("Pay");
        PayBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                PayBtnActionPerformed(evt);
            }
        });

        jButton3.setMnemonic('M');
        jButton3.setText("Back to Menu");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        ReturnTF.setDisabledTextColor(new java.awt.Color(0, 0, 0));
        ReturnTF.setEnabled(false);

        AmountTF.setDisabledTextColor(new java.awt.Color(0, 0, 0));
        AmountTF.setEnabled(false);
        AmountTF.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                AmountTFKeyReleased(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                AmountTFKeyTyped(evt);
            }
        });

        WACB.setSelected(true);
        WACB.setText("Send WhatsApp Message");

        jLabel9.setText("Payment");

        buttonGroup1.add(UPIRB);
        UPIRB.setText("UPI");

        buttonGroup1.add(CardRB);
        CardRB.setText("Card");

        buttonGroup1.add(PostpaidRB);
        PostpaidRB.setText("Postpaid");

        buttonGroup1.add(CashRB);
        CashRB.setText("Cash");
        CashRB.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                CashRBItemStateChanged(evt);
            }
        });

        jLabel10.setText("Customer gave");

        jLabel11.setText("Return");

        jButton4.setMnemonic('D');
        jButton4.setText("Delivered");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jScrollPane1))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(353, 353, 353)
                                .addComponent(jLabel8))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(342, 342, 342)
                                .addComponent(jLabel1)))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
            .addGroup(layout.createSequentialGroup()
                .addGap(33, 33, 33)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel2)
                            .addComponent(jLabel3)
                            .addComponent(jLabel4))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(MobileTF, javax.swing.GroupLayout.DEFAULT_SIZE, 120, Short.MAX_VALUE)
                            .addComponent(jTextField2, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(TimeTF, javax.swing.GroupLayout.Alignment.TRAILING))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(45, 45, 45)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addComponent(jLabel6)
                                .addGap(18, 18, 18)
                                .addComponent(DeliveredTF, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addComponent(jLabel5)
                                .addGap(18, 18, 18)
                                .addComponent(TotalTF, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addComponent(jLabel7)
                                .addGap(18, 18, 18)
                                .addComponent(PaidTF, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(66, 66, 66))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(304, 304, 304)
                                .addComponent(WACB))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(58, 58, 58)
                                .addComponent(jLabel9)
                                .addGap(18, 18, 18)
                                .addComponent(UPIRB)
                                .addGap(18, 18, 18)
                                .addComponent(CardRB)
                                .addGap(18, 18, 18)
                                .addComponent(PostpaidRB)
                                .addGap(18, 18, 18)
                                .addComponent(CashRB)
                                .addGap(40, 40, 40)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(jLabel10)
                                    .addComponent(jLabel11, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(18, 18, 18)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(AmountTF)
                                    .addComponent(ReturnTF, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE))))
                        .addGap(0, 0, Short.MAX_VALUE))))
            .addGroup(layout.createSequentialGroup()
                .addGap(71, 71, 71)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(158, 158, 158)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(152, 152, 152)
                                .addComponent(PayBtn)
                                .addGap(116, 116, 116)
                                .addComponent(jButton3))
                            .addComponent(RefreshBtn)))
                    .addComponent(jButton4))
                .addGap(0, 101, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 275, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jLabel8)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(5, 5, 5)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(TimeTF, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(TotalTF, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel2)
                            .addComponent(jLabel5))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jTextField2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(DeliveredTF, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel3)
                            .addComponent(jLabel6))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(MobileTF, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(PaidTF, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel4)
                            .addComponent(jLabel7)))
                    .addGroup(layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(30, 30, 30)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel9)
                        .addComponent(UPIRB)
                        .addComponent(CardRB)
                        .addComponent(PostpaidRB)
                        .addComponent(CashRB))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel10)
                            .addComponent(AmountTF, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel11)
                            .addComponent(ReturnTF, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(WACB)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(RefreshBtn)
                    .addComponent(PayBtn)
                    .addComponent(jButton3)
                    .addComponent(jButton4))
                .addContainerGap())
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void jTable1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTable1MouseClicked
        // TODO add your handling code here:
        int row = jTable1.getSelectedRow();
        if (row == -1) {
            return;
        }
        TimeTF.setText(jTable1.getValueAt(row, 0).toString());
        jTextField2.setText(jTable1.getValueAt(row, 1).toString());
        MobileTF.setText(jTable1.getValueAt(row, 2).toString());
        jTextArea1.setText(jTable1.getValueAt(row, 3).toString());
        TotalTF.setText(jTable1.getValueAt(row, 4).toString());
        DeliveredTF.setText(jTable1.getValueAt(row, 5).toString());
        PaidTF.setText(jTable1.getValueAt(row, 6).toString());
    }//GEN-LAST:event_jTable1MouseClicked

    private void CashRBItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_CashRBItemStateChanged
        // TODO add your handling code here:
        if (evt.getStateChange() == ItemEvent.SELECTED) {
            AmountTF.setEnabled(true);
        } else {
            AmountTF.setEnabled(false);
            AmountTF.setText("");
            ReturnTF.setText("");
        }
    }//GEN-LAST:event_CashRBItemStateChanged

    private void AmountTFKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_AmountTFKeyReleased
        // TODO add your handling code here:
        if (!"".equals(AmountTF.getText()) && !"".equals(TotalTF.getText())) {
            int total = Integer.parseInt(TotalTF.getText());
            int amount = Integer.parseInt(AmountTF.getText());
            if (amount >= total) {
                ReturnTF.setText("" + (amount - total));    //CALCULATES AMOUNT TO BE RETURNED BY CUSTOMER
            } else {
                ReturnTF.setText("");
            }
        }
    }//GEN-LAST:event_AmountTFKeyReleased

    private void AmountTFKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_AmountTFKeyTyped
        // TODO add your handling code here:
        if (!Character.isDigit(evt.getKeyChar()))
            evt.consume();
    }//GEN-LAST:event_AmountTFKeyTyped

    private void RefreshBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_RefreshBtnActionPerformed
        // TODO add your handling code here:
        DefaultTableModel model = (DefaultTableModel) jTable1.getModel();
        model.setRowCount(0);
        Connection con = null;
        Statement stmt = null;
        ResultSet rs = null;
        try {
            Class.forName("java.sql.Driver");
            con = DriverManager.getConnection("jdbc:mysql://localhost/mcscafe", "mcscafe", "hari");
            stmt = con.createStatement();
            String query = "SELECT Timestamp, Address, q.Mobile, Items, Price, Delivered, Paid FROM queue AS q LEFT JOIN User AS u ON q.Mobile=u.Mobile;";
            rs = stmt.executeQuery(query);
            while (rs.next()) {
                Object[] obj = new Object[]{rs.getString(1), rs.getString(6).equals("M") ? "TA" : rs.getString(2), rs.getLong(3), rs.getString(4), rs.getInt(5), rs.getString(6).equals("T") ? "D" : "P", rs.getString(7)};
                model.addRow(obj);
            }
        } catch (ClassNotFoundException | SQLException e) {
            try {
                Files.write(Paths.get(System.getProperty("user.dir") + "\\lib\\log.txt"), LoginPage.encrypt(new java.util.Date(System.currentTimeMillis()).toString()
                        + " Queues:502:RefreshBtnActionPerformed\n" + e.toString() + "\n\n").getBytes(), StandardOpenOption.APPEND);
            } catch (IOException ex) {
            }
        } finally {
            if (rs != null) {
                try {
                    rs.close();
                } catch (SQLException e) {
                }
            }
            if (stmt != null) {
                try {
                    stmt.close();
                } catch (SQLException e) {
                }
            }
            if (con != null) {
                try {
                    con.close();
                } catch (SQLException e) {
                }
            }
        }
        TimeTF.setText("");
        jTextField2.setText("");
        MobileTF.setText("");
        jTextArea1.setText("");
        TotalTF.setText("");
        DeliveredTF.setText("");
        PaidTF.setText("");
        buttonGroup1.clearSelection();
        jTable1.clearSelection();
    }//GEN-LAST:event_RefreshBtnActionPerformed

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        // TODO add your handling code here:
        String text = DeliveredTF.getText();
        if (text.equals("D")) {
            JOptionPane.showMessageDialog(this, "This order is already delivered", "Warning", JOptionPane.WARNING_MESSAGE);
            return;
        } else if (text.equals("")) {
            JOptionPane.showMessageDialog(this, "Select a row", "Warning", JOptionPane.WARNING_MESSAGE);
            return;
        }
        int row = jTable1.getSelectedRow();
        if (row != -1) {
            Connection con = null;
            Statement stmt = null;
            try {
                Class.forName("java.sql.Driver");
                con = DriverManager.getConnection("jdbc:mysql://localhost/mcscafe", "mcscafe", "hari");
                stmt = con.createStatement();
                String query = ";";
                if (PaidTF.getText().equals("F")) {
                    query = "Update queue set Delivered='T' where timestamp='" + jTable1.getValueAt(row, 0) + "';";
                } else if (DeliveredTF.getText().equals("P")) {
                    query = "DELETE FROM Queue WHERE Timestamp = '" + jTable1.getValueAt(row, 0) + "';";
                }
                stmt.executeUpdate(query);
                RefreshBtn.doClick();
            } catch (ClassNotFoundException | SQLException e) {
                try {
                    Files.write(Paths.get(System.getProperty("user.dir") + "\\lib\\log.txt"), LoginPage.encrypt(new java.util.Date(System.currentTimeMillis()).toString()
                            + " Queues:561:jButton4ActionPerformed\n" + e.toString() + "\n\n").getBytes(), StandardOpenOption.APPEND);
                } catch (IOException ex) {
                }
            } finally {
                if (stmt != null) {
                    try {
                        stmt.close();
                    } catch (SQLException e) {
                    }
                }
                if (con != null) {
                    try {
                        con.close();
                    } catch (SQLException e) {
                    }
                }
            }
        }
    }//GEN-LAST:event_jButton4ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        // TODO add your handling code here:
        new MCsCafe.MenuPage().setVisible(true);
        this.dispose();
    }//GEN-LAST:event_jButton3ActionPerformed

    private void PayBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_PayBtnActionPerformed
        // TODO add your handling code here:
        long mobile;
        int price, outstanding = 0;
        String method = null, methods = null, time = null;

        try {
            time = TimeTF.getText();
            mobile = Long.parseLong(MobileTF.getText());
            price = Integer.parseInt(TotalTF.getText());
        } catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(this, "Select a row", "Warning", JOptionPane.WARNING_MESSAGE);
            return;
        }

        if (PaidTF.getText().equals("T")) {
            JOptionPane.showMessageDialog(this, "This order is already paid", "Warning", JOptionPane.WARNING_MESSAGE);
            return;
        }

        if (("".equals(ReturnTF.getText()) && CashRB.isSelected())) {
            JOptionPane.showMessageDialog(this, "Enter Receiving Amount!");
            return;
        }

        if (UPIRB.isSelected()) {
            method = "U";
            methods = "UPI";
        } else if (CardRB.isSelected()) {
            method = "B";
            methods = "Card";
        } else if (CashRB.isSelected()) {
            method = "C";
            methods = "Cash";
        } else if (PostpaidRB.isSelected()) {
            method = "P";
            methods = "Postpaid";
        } else {
            JOptionPane.showMessageDialog(this, "Choose a Payment Method!", "Warning", JOptionPane.WARNING_MESSAGE);
            return;
        }

        Connection con = null;
        Statement stmt = null;
        ResultSet rs = null;

        try {
            Class.forName("java.sql.Driver");
            con = DriverManager.getConnection("jdbc:mysql://localhost/mcscafe", "mcscafe", "hari");
            stmt = con.createStatement();
            String query = ";";
            if (DeliveredTF.getText().equals("P")) {
                query = "UPDATE Queue SET Paid='T' WHERE Timestamp='" + time + "';";
            } else if (PaidTF.getText().equals("F")) {
                query = "DELETE FROM Queue WHERE Timestamp = '" + time + "';";
            }
            stmt.executeUpdate(query);
            query = "UPDATE Bill SET Method='" + method + "' WHERE BillNo = '" + time + "';";
            stmt.executeUpdate(query);
            JOptionPane.showMessageDialog(this, "Parcel Paid Processed!");
        } catch (ClassNotFoundException | SQLException e) {
            try {
                Files.write(Paths.get(System.getProperty("user.dir") + "\\lib\\log.txt"), LoginPage.encrypt(new java.util.Date(System.currentTimeMillis()).toString()
                        + " Queues:652:PayActionPerformed For Updating Bill and Queue\n" + e.toString() + "\n\n").getBytes(), StandardOpenOption.APPEND);
            } catch (IOException ex) {
            }
        } finally {
            if (stmt != null) {
                try {
                    stmt.close();
                } catch (SQLException e) {
                }
            }
            if (con != null) {
                try {
                    con.close();
                } catch (SQLException e) {
                }
            }
        }

        if (PostpaidRB.isSelected()) {
            try {
                Class.forName("java.sql.Driver");
                con = DriverManager.getConnection("jdbc:mysql://localhost/mcscafe", "mcscafe", "hari");
                stmt = con.createStatement();
                String query = "SELECT outstanding FROM postpaid where mobile=" + mobile + ";";
                rs = stmt.executeQuery(query);
                try {
                    rs.next();
                    outstanding = rs.getInt(1);
                } catch (SQLException e) {
                }
                outstanding += price;
                query = "INSERT INTO postpaid VALUES (" + mobile + "," + price + ") ON DUPLICATE KEY UPDATE outstanding = outstanding +" + price + ";";
                stmt.executeUpdate(query);
                JOptionPane.showMessageDialog(this, "Postpaid Updated! Outstanding Balance: " + outstanding);
            } catch (ClassNotFoundException | SQLException e) {
                try {
                    Files.write(Paths.get(System.getProperty("user.dir") + "\\lib\\log.txt"), LoginPage.encrypt(new java.util.Date(System.currentTimeMillis()).toString()
                            + " Queues:689:PayActionPerformed For Inserting into Postpaid\n" + e.toString() + "\n\n").getBytes(), StandardOpenOption.APPEND);
                } catch (IOException ex) {
                }
            } finally {
                if (rs != null) {
                    try {
                        rs.close();
                    } catch (SQLException e) {
                    }
                }
                if (stmt != null) {
                    try {
                        stmt.close();
                    } catch (SQLException e) {
                    }
                }
                if (con != null) {
                    try {
                        con.close();
                    } catch (SQLException e) {
                    }
                }
            }
        }

        String items = "Hello%20from%20MC's%20CafÃ©!%0D%0A%0D%0ANet%20Amount%20Payable%3A%20%E2%82%B9" + TotalTF.getText() + "%0D%0APayment%20Method%3A%20" + methods + "%0D%0A%0D%0AYou%20have%20paid%20for%20the%20parcel%20you%20bought%20on%20" + time.replaceAll(" ", "%20");

        if (PostpaidRB.isSelected()) {
            items += "%0D%0A%0D%0AOutstanding%20Balance%3A%20%20%E2%82%B9" + outstanding + "%0D%0A";
        }

        if (WACB.isSelected()) {
            try {
                URI url = new URI(("https://wa.me/91" + mobile + "?text=" + items + "%0D%0AThank%20you%20for%20dining%20with%20us%2C%0D%0AHope%20to%20see%20you%20again!").replaceAll(" ", "%20"));
                java.awt.Desktop.getDesktop().browse(url);
            } catch (IOException | URISyntaxException e) {
                try {
                    Files.write(Paths.get(System.getProperty("user.dir") + "\\lib\\log.txt"), LoginPage.encrypt(new java.util.Date(System.currentTimeMillis()).toString()
                            + " Queues:727:PayActionPerformed\n" + e.toString() + "\n\n").getBytes(), StandardOpenOption.APPEND);
                } catch (IOException ex) {
                }
            }
        }
        RefreshBtn.doClick();
    }//GEN-LAST:event_PayBtnActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | javax.swing.UnsupportedLookAndFeelException ex) {
            try {
                Files.write(Paths.get(System.getProperty("user.dir") + "\\lib\\log.txt"), LoginPage.encrypt(new java.util.Date(System.currentTimeMillis()).toString()
                        + " Queues:754:main\n" + ex.toString() + "\n\n").getBytes(), StandardOpenOption.APPEND);
            } catch (IOException e) {
            }
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            @Override
            public void run() {
                new Queues().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField AmountTF;
    private javax.swing.JRadioButton CardRB;
    private javax.swing.JRadioButton CashRB;
    private javax.swing.JTextField DeliveredTF;
    private javax.swing.JTextField MobileTF;
    private javax.swing.JTextField PaidTF;
    private javax.swing.JButton PayBtn;
    private javax.swing.JRadioButton PostpaidRB;
    private javax.swing.JButton RefreshBtn;
    private javax.swing.JTextField ReturnTF;
    private javax.swing.JTextField TimeTF;
    private javax.swing.JTextField TotalTF;
    private javax.swing.JRadioButton UPIRB;
    private javax.swing.JCheckBox WACB;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTable jTable1;
    private javax.swing.JTextArea jTextArea1;
    private javax.swing.JTextField jTextField2;
    // End of variables declaration//GEN-END:variables
}
